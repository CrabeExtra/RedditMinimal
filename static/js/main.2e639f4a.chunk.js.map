{"version":3,"sources":["features/PostList/postListSlice.js","features/PostList/PostList.js","features/Subreddit/subredditSlice.js","features/Searchbar/Searchbar.js","features/Searchbar/searchbarSlice.js","App/App.js","reportWebVitals.js","App/store.js","index.js"],"names":["loadData","data","type","payload","initialPostList","PostList","props","postList","subreddit","dispatch","useState","exists","setExists","loadMoreIter","setLoadMoreIter","placeholderURL","useEffect","search","fetch","then","res","json","console","log","children","map","catch","e","style","marginTop","id","post","i","obj","title","is_video","controls","src","media","reddit_video","fallback_url","replace","preview","images","source","url","alt","author","selftext","rel","href","target","onClick","setSubreddit","Searchbar","text","checkForChange","setCheckForChange","onChange","value","App","state","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","action","searchbar","store","createStore","combineReducers","render","ReactDOM","StrictMode","getState","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.2e639f4a.chunk.js","sourcesContent":["\r\nexport const loadData = (data) => {\r\n    return {\r\n        type: 'postList/loadData',\r\n        payload: data\r\n    };\r\n}\r\n\r\nexport const loadMore = (data) => {\r\n    return {\r\n        type: 'postList/loadMore',\r\n        payload: data\r\n    };\r\n}\r\n\r\nconst initialPostList = [];\r\nexport const postListReducer = (postList = initialPostList, action) => {\r\n    switch(action.type) {\r\n        case 'postList/loadData': {\r\n            return action.payload;\r\n        }\r\n        case 'postList/loadMore': {\r\n            return [...postList, action.payload];\r\n        }\r\n        default: {\r\n            return postList;\r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { loadData } from './postListSlice';\r\n\r\n/**\r\n * \r\n * returns a list of reddit posts displayed correctly\r\n */\r\n\r\nconst PostList = (props) => {\r\n    const { postList, subreddit, dispatch } = props;\r\n    //const [sortBy, setSortBy] = useState('relevance'); // for storing sort-by data if user's are to interact with this variable later\r\n    //const [searchLimit, setSearchLimit] = useState(25); // for storing searchlimit data if user's are to interact with this variable later\r\n    const [exists, setExists] = useState(<p></p>);\r\n    const [loadMoreIter, setLoadMoreIter] = useState(0);\r\n    const sortBy = 'relevance';\r\n    const searchLimit = 25;\r\n    const placeholderURL = '//cdn.vox-cdn.com/thumbor/8i-wKl-12cdGNC4U4LF0tzMh3xM=/0x0:640x427/1200x800/filters:focal(0x0:640x427)/cdn.vox-cdn.com/uploads/chorus_image/image/37152424/reddit_logo_640.0.jpg';\r\n\r\n    useEffect(() => {\r\n        if(subreddit) {\r\n                if(subreddit.search) {\r\n                    setExists(<p></p>);\r\n                    fetch(`//www.reddit.com/search.json?q=${subreddit.data}&sort=${sortBy}&limit=${searchLimit+25*loadMoreIter}`)\r\n                    .then(res => res.json())\r\n                    .then(data =>  {\r\n                        console.log(data.data.children.map(data => data.data));\r\n                        dispatch(loadData(data.data.children));\r\n                    })\r\n                    .catch(e => console.log(e));\r\n                } else {\r\n                    setExists(<p></p>);\r\n                    fetch(`//www.reddit.com/r/${subreddit.data}.json?limit=${searchLimit+25*loadMoreIter}`)\r\n                    .then(res => res.json())\r\n                    .then(data => {\r\n                        console.log(data.data.children.map(data => data.data));\r\n                        dispatch(loadData(data.data.children));\r\n                    })\r\n                    .catch(e => {\r\n                        setExists(<h2 style={{marginTop: 100}}>The entered subreddit does not exist (or some other error)</h2>);\r\n                        return console.log(e);\r\n                    });\r\n                }\r\n        } \r\n    }, [subreddit, dispatch, loadMoreIter]);\r\n    \r\n    useEffect(() => {\r\n        setLoadMoreIter(0);\r\n    }, [subreddit]);\r\n    \r\n    const loadMoreHandler = () => {\r\n        setLoadMoreIter(loadMoreIter+1);\r\n    }\r\n    \r\n\r\n    if(!postList) {\r\n        return <h1 style={{marginTop: 100}}>Sorry, posts weren't able to be retrieved</h1>;\r\n    }\r\n    \r\n    //todo: implement unordered list of posts with pictures (if available) and text, add button at bottom to load more posts.\r\n    \r\n    return (\r\n        <div id='postlist' style={{marginTop: 100}}>\r\n            <div>{exists}</div>\r\n            <ul>\r\n                {\r\n                    postList.map((post, i) => {\r\n                        if(subreddit.search) {\r\n                            return (\r\n                                <li obj={post} key={i}>\r\n                                    <h2><u>{post.data.title}</u></h2>\r\n                                    <h3>Subreddit: {post.data.subreddit}</h3>\r\n                                    {post.data.is_video ? <video controls><source src={post.data.media.reddit_video.fallback_url.replace('https:', '')} type='video/mp4'/></video> : <img src={post.data.preview ? post.data.preview.images[0].source.url.replace('amp;', '').replace('https:', '') : placeholderURL} alt='' />}\r\n                                    <h4>Author name: {post.data.author}</h4>\r\n                                    <p>{post.data.selftext}</p>\r\n                                    <a rel=\"noreferrer\" href={post.data.url} target='_blank'><u>Click here to open reddit post</u></a>\r\n                                </li>\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <li obj={post} key={i}>\r\n                                    <h2><u>{post.data.title}</u></h2>\r\n                                    <h3>Subreddit: {post.data.subreddit}</h3>\r\n                                    {post.data.is_video ? <video controls><source src={post.data.media.reddit_video.fallback_url.replace('https:', '')} type='video/mp4'/></video> : <img src={post.data.preview ? post.data.preview.images[0].source.url.replace('amp;', '').replace('https:', '') : placeholderURL} alt='' />}\r\n                                    <h4>Author name: {post.data.author}</h4>\r\n                                    <p>{post.data.selftext}</p>\r\n                                    <a rel=\"noreferrer\" href={post.data.url} target='_blank'><u>Click here to open reddit post</u></a>\r\n                                </li>\r\n                            );\r\n                        }\r\n                    })\r\n                }\r\n            </ul>\r\n            \r\n            <button onClick={loadMoreHandler} type='button' id='loadMore'>Load More...</button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default PostList;","\r\nexport const setSubreddit = (data, search) => {\r\n    return {\r\n        type: 'subreddit/setSubreddit',\r\n        payload: { data, search }\r\n    };\r\n}\r\n\r\nconst initialSubreddit = '';\r\nexport const subredditReducer = (subreddit = initialSubreddit, action) => {\r\n    switch(action.type) {\r\n        case 'subreddit/setSubreddit': {\r\n            return action.payload;\r\n        }\r\n        default: {\r\n            return subreddit;\r\n        }\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { setText } from './searchbarSlice';\r\nimport { setSubreddit } from './../Subreddit/subredditSlice';\r\n\r\n/**\r\n * \r\n * returns a searchbar, through which state variables 'subreddit' and 'text' may be altered, \r\n * TODO: ensure subreddit exists before changing subreddit variable\r\n */\r\n\r\n\r\nconst Searchbar = (props) => {\r\n    const { text, dispatch } = props;\r\n\r\n    const [checkForChange, setCheckForChange] = useState(text);\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(setSubreddit(text, false));\r\n        \r\n    }\r\n\r\n    const onClickHandlerSearch = () => {\r\n        dispatch(setSubreddit(text, true));\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setText(checkForChange));\r\n    }, [checkForChange, dispatch]);\r\n\r\n    //todo, add suggested list of subreddits\r\n    return (\r\n        <div id='search'>\r\n            <h3>Search:</h3>\r\n            <input onChange={(e) => setCheckForChange(e.target.value)} id='searchbar'></input>\r\n            <button onClick={onClickHandler} id='subredditButton' type='submit'>Open Subreddit by Name</button>\r\n            <button onClick={onClickHandlerSearch} id='searchButton' type='submit'>Submit Search</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbar;","\r\nexport const setText = (data) => {\r\n    return {\r\n        type: 'searchbar/search',\r\n        payload: data\r\n    };\r\n}\r\n\r\nconst initialSearchbar = '';\r\nexport const searchbarReducer = (searchbar = initialSearchbar, action) => {\r\n    switch(action.type) {\r\n        case 'searchbar/search': {\r\n            return action.payload;\r\n        }\r\n        default: {\r\n            return searchbar;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport './../index.css';\n//import PlaceHolder from './../features/placeHolder/placeHolder';\nimport PostList from './../features/PostList/PostList';\nimport Searchbar from './../features/Searchbar/Searchbar';\n\n/**\n * \n * displays the entire app as the sum of its features.\n */\nconst App = (props) => {\n\n  const { state, dispatch } = props;\n  return (\n    <div className=\"App\">\n      <Searchbar \n        text={state.text}\n        dispatch={dispatch}\n      />\n      <PostList\n        postList={state.postList}\n        subreddit={state.subreddit}\n        dispatch={dispatch}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers } from 'redux';\r\nimport { postListReducer } from './../features/PostList/postListSlice';\r\nimport { searchbarReducer } from './../features/Searchbar/searchbarSlice';\r\nimport { subredditReducer } from './../features/Subreddit/subredditSlice';\r\n// import other features\r\n/**\r\n * generates the state store of the app to be used throughout persistently\r\n */\r\nconst reducers = {\r\n    postList: postListReducer,\r\n    text: searchbarReducer,\r\n    subreddit: subredditReducer\r\n    //other reducers\r\n}\r\nconst store = createStore(combineReducers(reducers));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './App/store';\n\nconst render = () => (\n  ReactDOM.render(\n    <React.StrictMode>\n      <App \n        state={store.getState()}\n        dispatch={store.dispatch}\n      />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nrender();\n\nstore.subscribe(render);"],"sourceRoot":""}